import os

# config perturbation recipes
# NL_AUG_RECIPES = ["BackTranslation", "ChangeCharCase", "SynonymSubstitution"] # 3 most natural
NL_AUG_RECIPES = ["BackTranslation", "ButterFingersPerturbation", "ChangeCharCase", "EnglishInflectionalVariation",\
             "SwapCharactersPerturbation", "SynonymInsertion", "SynonymSubstitution", "TenseTransformationPast", "TenseTransformationFuture", "WhitespacePerturbation"] # 10 natural transformations

# ForWhileTransformerFirst (for eval), ForWhileTransformer (for training)
PARTIAL_RECIPES = ["Black", "NoTransformation", "BlockSwap", "DeadCodeInserter", "ForWhileTransformer", "ForWhileTransformerFirst", "OperandSwap", "VarRenamerCB", "VarRenamerNaive", "VarRenamerRN"]

FUNC_RECIPES = ["FuncRenameCamelCase", "FuncRenameButterFinger", "FuncRenameSwapChar", "FuncRenameChangeChar", "FuncRenameInflectionalVariation", "FuncRenameSynonymSub"]

FORMAT_RECIPES = ["tab_indent", "split_lines", "doc2comments", "new_lines", "new_line_aftercode", "new_line_afterdoc", "indent_new_line_aftercode"]

FULL_RECIPES = NL_AUG_RECIPES + PARTIAL_RECIPES + FUNC_RECIPES + FORMAT_RECIPES

RECIPES = {"nlaugmenter": NL_AUG_RECIPES, "natgen": PARTIAL_RECIPES, "format": FORMAT_RECIPES, "func_name": FUNC_RECIPES, "random": FULL_RECIPES}


# config clean data (nominal) path
data_path = "datasets/nominal"
# Please customize dataset name and file path name under $data_path
DATASET_PATH = {"humaneval": "HumanEval.jsonl", "mbpp": "mbpp_wtest.jsonl", "mbjp": "mbjp_beta_wtest.jsonl", "mbjsp": "mbjsp_beta_wtest.jsonl",\
            "mbphp": "mbphp_alpha.jsonl", "mbrbp": "mbrbp_alpha.jsonl", "mbkp": "mbkp_alpha.jsonl"}


# config generated data (perturbed) path
output_adv_path = "datasets/perturbed/" # all generated perturbeddata path
# config model generation outputs
model_generate_path = "eval_results/" # results generated by the model on perturbed datasets


# config the inference script
run_script = "cd evaluate-public-models & evaluate-public-models/run_eval_models.sh"

# num_gpus = 1

if not os.path.exists(output_adv_path):
    os.mkdir(output_adv_path)